{"version":3,"sources":["components/pagination/Posts.js","components/pagination/Pagination.js","components/progressBar/ProgressBar.js","App.js","index.js"],"names":["Posts","posts","loading","className","map","post","key","id","title","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","ProgressBar","props","bgcolor","completed","fillerStyles","height","width","backgroundColor","transition","borderRadius","textAlign","contentStyle","display","justifyContent","color","style","padding","fontWeight","App","useState","setPosts","setLoading","currentPage","setCurrentPage","setCompleted","useEffect","setInterval","floor","random","a","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","length","pageNumber","ReactDOM","render","document","getElementById"],"mappings":"qQAkBeA,EAhBD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MACf,OADoC,EAAdC,QAEb,0CAIP,wBAAIC,UAAU,mBACXF,EAAMG,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,GAAIJ,UAAU,mBACzBE,EAAKG,YCaDC,EAtBI,SAAC,GAGlB,IAH8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACzDD,EAAYI,KAAKH,GAGnB,OACE,6BACE,wBAAIX,UAAU,cACXU,EAAYT,KAAI,SAAAc,GAAM,OACrB,wBAAIZ,IAAKY,EAAQf,UAAU,aACzB,uBAAGgB,QAAS,kBAAMP,EAASM,IAASE,KAAK,KAAKjB,UAAU,aACrDe,UCuCAG,EAnDK,SAACC,GAAW,IACtBC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,UAcXC,EAAe,CACnBC,OAAQ,OACRC,MAAM,GAAD,OAAKH,EAAL,KACLI,gBAAiBL,EACjBM,WAAY,uBACZC,aAAc,UACdC,UAAW,SASPC,EAAc,CAClBC,QAAQ,OACRC,eAAgB,gBAChBC,MAAOZ,GAGT,OACE,oCACA,yBAAKa,MAAOJ,GACV,kCACA,mCAEF,yBAAKI,MAvCiB,CACtBV,OAAQ,GACRC,MAAO,OACPC,gBAAiB,UACjBE,aAAc,KAoCZ,yBAAKM,MAAOX,GACV,0BAAMW,MApBQ,CAClBC,QAAS,EACTF,MAAO,QACPG,WAAY,SAiBR,UAA8Bd,EAA9B,U,iBCUOe,G,MA9CH,WAAM,MAEUC,mBAAS,IAFnB,mBAETvC,EAFS,KAEFwC,EAFE,OAGcD,oBAAS,GAHvB,mBAGTtC,EAHS,KAGAwC,EAHA,OAIsBF,mBAAS,GAJ/B,mBAITG,EAJS,KAIIC,EAJJ,OAKOJ,mBAAS,IAAzB9B,EALS,sBAOkB8B,mBAAS,GAP3B,mBAOThB,EAPS,KAOEqB,EAPF,KAQhBC,qBAAU,WACRC,aAAY,kBAAMF,EAAa9B,KAAKiC,MAAsB,IAAhBjC,KAAKkC,UAAkB,KAAI,OACpE,IAGHH,qBAAU,YACQ,uCAAG,4BAAAI,EAAA,6DACjBR,GAAW,GADM,SAECS,IAAMC,IAAI,8CAFX,OAEXC,EAFW,OAGjBZ,EAASY,EAAIC,MACbZ,GAAW,GAJM,2CAAH,qDAOhBa,KACC,IAGH,IAAMC,EAAkBb,EAAcjC,EAChC+C,EAAmBD,EAAkB9C,EACrCgD,EAAezD,EAAM0D,MAAMF,EAAkBD,GAKnD,OACE,yBAAKrD,UAAU,kBACb,wBAAIA,UAAU,qBAAd,WACA,kBAAC,EAAD,CAAOF,MAAOyD,EAAcxD,QAASA,IACrC,kBAAC,EAAD,CACEQ,aAAcA,EACdC,WAAYV,EAAM2D,OAClBhD,SATW,SAACiD,GAAD,OAAgBjB,EAAeiB,MAW5C,kBAAC,EAAD,CAAatC,QAAS,UAAWC,UAAWA,OChDlDsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2b968a0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Posts = ({ posts, loading }) => {\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <ul className='list-group mb-4'>\r\n      {posts.map(post => (\r\n        <li key={post.id} className='list-group-item'>\r\n          {post.title}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} href='/#' className='page-link'>\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\n// import { FaFileExcel } from \"react-icons/fa\";\r\n\r\nconst ProgressBar = (props) => {\r\n  const { bgcolor, completed } = props;\r\n\r\n  const containerStyles = {\r\n    height: 20,\r\n    width: \"100%\",\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    // marginTop:0,\r\n    // marginBottom:0,\r\n    // marginRight:10,\r\n    // marginLeft:10\r\n    // margin: 0 50,\r\n  };\r\n\r\n  const fillerStyles = {\r\n    height: \"100%\",\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    transition: \"width 1s ease-in-out\",\r\n    borderRadius: \"inherit\",\r\n    textAlign: \"right\",\r\n  };\r\n\r\n  const labelStyles = {\r\n    padding: 5,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n  };\r\n\r\n  const contentStyle ={\r\n    display:\"flex\",\r\n    justifyContent: \"space-between\",\r\n    color: bgcolor,\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div style={contentStyle}>\r\n      <p>CSS</p>\r\n      <p>75%</p>\r\n    </div>\r\n    <div style={containerStyles}>\r\n      <div style={fillerStyles}>\r\n        <span style={labelStyles}>{`${completed}%`}</span>\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState, useEffect } from \"react\";\r\n// Pagination\r\nimport Posts from \"./components/pagination/Posts\";\r\nimport Pagination from \"./components/pagination/Pagination\";\r\n// Progress Bar\r\nimport ProgressBar from \"./components/progressBar/ProgressBar\";\r\n//Api cal\r\nimport axios from \"axios\";\r\n//CSS\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  // pagination state\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(10);\r\n  // progress Bar state\r\n  const [completed, setCompleted] = useState(0);\r\n  useEffect(() => {\r\n    setInterval(() => setCompleted(Math.floor(Math.random() * 100) + 1), 2000);\r\n  }, []);\r\n\r\n  // get data into posts\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\r\n      setPosts(res.data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // Change page\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className='container mt-5'>\r\n      <h1 className='text-primary mb-3'>My Blog</h1>\r\n      <Posts posts={currentPosts} loading={loading} />\r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n      <ProgressBar bgcolor={\"#6a1b9a\"} completed={completed} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}